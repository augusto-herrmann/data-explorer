{"version":3,"sources":["utils/index.js","reducers/widgets.js","reducers/datapackage.js","reducers/datastoreFilters.js","reducers/serializedState.js","reducers/rootReducer.js","store.js","components/DataView/index.js","components/Share/index.js","utils/loadDataset.js","actions/index.js","App.js","AppWithProvider.js","serviceWorker.js","index.js","../node_modules/tableschema/lib/profiles sync /^/.//.*/.json$"],"names":["unloadDatapackage","datapackage","unloadedDatapackage","deepClone","resources","forEach","resource","data","_values","views","view","obj","JSON","parse","stringify","reducers_widgets","state","arguments","length","undefined","action","type","stateForChartBuilder","map","widget","specType","payload","Object","assign","stateForMapBuilder","widgets","reducers_datapackage","datastoreFilters","reducers_serializedState","root","clonedRoot","serializedState","loading","e","console","warn","rootReducer","initialState","configureStore","props","createStore","composeWithDevTools","applyMiddleware","thunk","DataView","react_default","a","createElement","react_loader_default","loaded","style","position","dist_App","key","Math","random","slimProps","Share","prop","slim","shareLink","concat","iframe","shareable","copy","str","el","document","value","setAttribute","left","body","appendChild","select","execCommand","removeChild","className","id","href","onClick","toArray","require","parseDatapackageIdentifier","stringOrJSON","loadDataset","_ref","asyncToGenerator","regenerator_default","mark","_callee2","dpID","DP_ID","tabularFormats","dataset","wrap","_context2","prev","next","Dataset","load","sent","Promise","all","_ref2","_callee","file","response","result","fileInline","headers","rowStream","_response","_result","_context","displayName","abrupt","descriptor","path","includes","fetch","ok","unavailable","json","records","open","values","format","keys","addSchema","schema","rows","size","keyed","t0","toLowerCase","stop","_x2","apply","this","_x","selectTab","res","_objectSpread","datapackageLoad","fetchDataBegin","fetchDataSuccess","connect","App_objectSpread","dispatch","filterUIAction","getState","newResource","updatedDatapackage","loadingWidgets","loadedDataset","datastore_active","compileView","fetchDataAction","_x3","dataViewBuilderAction","actionType","selectTabAction","index","active","name","useEffect","activeWidget","find","selectedTab","tabLinks","lib","to","tabContents","for","chart_builder_dist","map_builder_dist","dist","filterBuilderAction","renderActiveTabContentOnly","handleSelect","AppWithProvider","_unused","log","widgetNames","table","tabularmap","simple","widgetsFromViews","es","store","src_App_0","Boolean","window","location","hostname","match","instances","getElementsByClassName","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","done","instance","getAttribute","rest","objectWithoutProperties","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","./geojson.json","./table-schema.json","./topojson.json","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.0a7b03a1.chunk.js","sourcesContent":["export const unloadDatapackage = datapackage => {\n  const unloadedDatapackage = deepClone(datapackage)\n  \n  unloadedDatapackage.resources && unloadedDatapackage.resources.forEach(resource => {\n    delete resource.data\n    delete resource._values\n  })\n  \n  unloadedDatapackage.views && unloadedDatapackage.views.forEach(view => {\n    view.resources && view.resources.forEach(resource => {\n      delete resource.data\n      delete resource._values\n    })\n  })\n\n  return unloadedDatapackage\n}\n\nexport const getEmptyView = datapackage => {\n  try {\n    return {resources: [{schema: datapackage.resources[0].schema}]}\n  } catch (e) {\n    return {}\n  }\n}\n\nexport const getDataViewChartBuilderView = (datapackage) => {\n  if (!datapackage) return {}\n\n  const views = datapackage.views || []\n\n  switch (views.length) {\n    case 1:\n      return datapackage.views[0]\n    case 2:\n      return datapackage.views[1]\n    case 3:\n      return datapackage.views[2]\n    default:\n      return getEmptyView(datapackage)\n  }\n}\n\nexport const getDataViewMapBuilderView = (datapackage) => {\n  if (!datapackage) return {}\n\n  const views = datapackage.views || []\n\n  return views.find(view => view.specType === 'tabularmap') || getEmptyView(datapackage)\n}\n\nexport const getResourceForFiltering = (datapackage) => {\n  if (!datapackage) return {}\n  return datapackage.resources[0]\n}\n\nexport const deepClone = obj => {\n  return JSON.parse(JSON.stringify(obj))\n}\n","import { deepClone } from '../utils'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case 'DATA_VIEW_CHART_BUILDER_ACTION':\n      let stateForChartBuilder = deepClone(state)\n      stateForChartBuilder = stateForChartBuilder.map(widget => {\n        if (widget.datapackage.views[0].specType === 'simple') {\n          widget.datapackage.views[0] = action.payload\n        }\n        return widget\n      })\n      return Object.assign(deepClone(state), stateForChartBuilder)\n    case 'DATA_VIEW_MAP_BUILDER_ACTION':\n      let stateForMapBuilder = deepClone(state)\n      stateForMapBuilder = stateForMapBuilder.map(widget => {\n        if (widget.datapackage.views[0].specType === 'tabularmap') {\n          widget.datapackage.views[0] = action.payload\n        }\n        return widget\n      })\n      return Object.assign(deepClone(state), stateForMapBuilder)\n    case 'SELECT_TAB':\n      return action.payload.widgets\n    case 'FETCH_DATA_BEGIN':\n      return action.payload.widgets\n    case 'FETCH_DATA_SUCCESS':\n      return action.payload.widgets\n    case 'FETCH_DATA_FAILURE':\n      return action.payload.widgets\n    default:\n     return state\n  }\n}\n","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'DATAPACKAGE_LOAD':\n    return action.payload.datapackage\n   default:\n    return state\n  }\n }\n ","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'FILTER_UI_ACTION':\n    return state \n   default:\n    return state\n  }\n }\n ","import { deepClone, unloadDatapackage } from '../utils'\n\n// updates on every action and translates app state to shareable links\nexport default (state = {}, action, root) => {\n  try {\n    const clonedRoot = deepClone(root)\n    delete clonedRoot.serializedState\n    const datapackage = unloadDatapackage(clonedRoot.datapackage)\n    const widgets = clonedRoot.widgets.map(widget => {\n      widget.datapackage = unloadDatapackage(widget.datapackage)\n      widget.loading = false\n      return widget\n    })\n\n    return JSON.stringify(Object.assign(clonedRoot, {datapackage, widgets}))\n  } catch (e) {\n    console.warn(e)\n    return {}\n  }\n}\n","import { default as widgets } from './widgets'\nimport { default as datapackage } from './datapackage'\nimport { default as datastoreFilters } from './datastoreFilters'\nimport { default as serializedState } from './serializedState'\n\nexport default (state = {}, action) => {\n  return {\n    widgets: widgets(state.widgets, action),\n    datapackage: datapackage(state.datapackage, action),\n    datastoreFilters: datastoreFilters(state.datastoreFilters, action),\n    serializedState: serializedState(state.serializedState, action, state) // we pass root of tree so it can export entire app state\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer'\n\nconst initialState = {\n  datastoreFilters: {\n    // Datastore specific filters\n  },\n  datapackage: {},\n  widgets: [],\n  serializedState: {}\n}\n\nexport default function configureStore(props) {\n \n return createStore(\n   rootReducer,\n   Object.assign({}, initialState, props),\n   composeWithDevTools(applyMiddleware(thunk))\n )\n}\n","import React from 'react'\nimport Loader from 'react-loader'\nimport { DataView } from '@datopian/datapackage-views-js'\n\nexport default props => {\n  const views = props.datapackage.views\n\n  return (\n  <Loader loaded={!props.loading} style={{position: \"relative\"}}>\n    <div>\n     {\n        views.map(view => <DataView key={Math.random()} datapackage={{views: [view]}} />)\n     }\n    </div>\n  </Loader>\n  )\n}\n","import React from 'react'\nimport ReactDom from 'react-dom'\n\nconst MAX_LEN = 1500\nconst slimProps = ['archiver', 'schema', 'shareLink', 'iframeText']\nconst slim = serializedState => {\n  if (serializedState.length <= MAX_LEN) return serializedState\n  const state = JSON.parse(serializedState)\n  state.datapackage.resources.forEach(resource => {\n    for (const prop in slimProps) {\n      if (resource[slimProps[prop]]) delete resource[slimProps[prop]]\n    }\n  })\n  return JSON.stringify(state)\n}\n\nexport default props => {\n  const serializedState = slim(props.serializedState)\n  // TODO this is a stub for montreal -- need to pass origin as props\n  const shareLink = `localhost:4000/data-explorer?explorer=${serializedState}`\n  const iframe = `<iframe src=\"localhost:4000/data-explorer?explorer=${serializedState}\" />`\n  const shareable = shareLink.length < 2000\n\n  const copy = (str) => {\n    // Create new element\n    var el = document.createElement('textarea')\n    // Set value (string to be copied)\n    el.value = str\n    // Set non-editable to avoid focus and move outside of view\n    el.setAttribute('readonly', '')\n    el.style = {position: 'absolute', left: '-9999px'}\n    document.body.appendChild(el)\n    // Select text inside element\n    el.select()\n    // Copy text to clipboard\n    document.execCommand('copy')\n    // Remove temporary element\n    document.body.removeChild(el)\n  }\n\n  return (\n  <div>\n    {shareable &&\n      <div className=\"dx-share-container\">\n        <div className=\"m-4\">\n          <input id=\"share-link\" className=\"border-solid border-4 border-gray-600 w-1/2 px-2\" value={shareLink} />\n          <a href=\"#/\" id=\"copy-share-link\" className=\"m-4\" onClick={() => {copy(shareLink)}}><i>copy share link</i></a>\n        </div>\n        <div className=\"m-4\">\n          <input id=\"embed\" className=\"border-solid border-4 border-gray-600 px-2 w-1/2\" value={iframe} />\n          <a href=\"#/\" id=\"copy-share-link\" className=\"m-4\" onClick={() => {copy(iframe)}}><i>copy embed text</i></a>\n        </div>\n      </div>\n    }\n    {!shareable &&\n      <p>No share link available</p>\n    }\n    </div>\n  )\n}\n","import { Dataset, open } from 'data.js'\n\nvar toArray = require('stream-to-array')\n\nfunction parseDatapackageIdentifier(stringOrJSON) {\n  try {\n    return JSON.parse(stringOrJSON)\n  } catch (e) {\n    return stringOrJSON\n  }\n}\n\n// needs to be encapsulated\n// should be library code\nexport default async dpID => {\n  const DP_ID = parseDatapackageIdentifier(dpID)\n  const tabularFormats = ['csv', 'tsv', 'dsv', 'xls', 'xlsx']\n\n  try {\n    const dataset = await Dataset.load(DP_ID)\n\n    await Promise.all(dataset.resources.map(async (file) => {\n      if (file.displayName === 'FileInline') {\n        return\n      } else if (file.descriptor.path && file.descriptor.path.includes('datastore_search')) {\n        // Datastore, e.g., when a path is a 'datastore_search' API\n        const response = await fetch(file.descriptor.path)\n        if (!response.ok) {\n          file.descriptor.unavailable = true\n          return\n        }\n        const result = await response.json()\n        file.descriptor.data = result.result.records\n        // Infer schema but re-open the file as it is now \"inlined\":\n        const fileInline = open({\n          data: file.descriptor.data.map(Object.values),\n          format: 'csv'\n        })\n        const headers = Object.keys(file.descriptor.data[0])\n        fileInline.descriptor.data = [headers].concat(fileInline.descriptor.data)\n        await fileInline.addSchema()\n        file.descriptor.schema = fileInline.descriptor.schema\n      } else if (file.displayName === \"FileRemote\" && tabularFormats.includes(file.descriptor.format)) {\n        // Tabular data\n        try {\n          const rowStream = await file.rows({size: 100, keyed: true})\n          const data = await toArray(rowStream)\n          if (data.length > 0) {\n            file.descriptor.data = data // This makes it FileInline\n          } else {\n            file.descriptor.unavailable = true\n          }\n          await file.addSchema()\n        } catch (e) {\n          console.warn(e)\n          file.descriptor.unavailable = true\n        }\n      } else if (file.descriptor.format.toLowerCase().includes('json')) {\n        // Geographical data\n        const response = await fetch(file.descriptor.path)\n        if (!response.ok) {\n          file.descriptor.unavailable = true\n          return\n        }\n        const result = await response.json()\n        // The '.json' files can contain geo data - check by its 'type' property\n        const geoJsonTypes = [\n          'Feature', 'FeatureCollection', 'Point', 'MultiPoint', 'LineString',\n          'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'\n        ]\n        if (geoJsonTypes.includes(result.type)) {\n          file.descriptor.data = result\n        } else {\n          // It isn't a valid GeoJSON\n          file.descriptor.unavailable = true\n          return\n        }\n      } else if (file.descriptor.format.toLowerCase() === 'pdf') {\n        return\n      } else {\n        // We can't load any other data types for now.\n        file.descriptor.unavailable = true\n      }\n    }))\n\n    return dataset.descriptor\n  } catch (e) {\n    console.warn('Failed to load a Dataset from provided datapackage id\\n' + e)\n    return DP_ID\n  }\n}\n","import loadDataset from '../utils/loadDataset'\nimport { compileView } from 'datapackage-render';\n\nexport const selectTabAction = (payload) => (dispatch, getState) => {\n  const widgets = JSON.parse(JSON.stringify(getState().widgets))\n  widgets.forEach((widget, index) => {\n    widgets[index].active = false\n    if (widget.name === payload) {\n      widgets[index].active = true\n    }\n  })\n  dispatch(selectTab({widgets}))\n}\n\nexport const filterUIAction = (payload) => async (dispatch, getState) => {\n let datapackage = JSON.parse(JSON.stringify(getState().datapackage))\n // For datastore resources, we need to remove loaded `data` attribute to\n // trigger re-fetch of a resource. This is required since we initially fetch\n // only subset of data from datastore, eg, first 100 rows. When user applies\n // filters, we need to hit datastore api and update the data.\n const newResource = JSON.parse(JSON.stringify(payload))\n const updatedDatapackage = Object.assign(datapackage, {resources: [newResource]})\n if (updatedDatapackage.resources[0].datastore_active) {\n   delete updatedDatapackage.resources[0].data\n }\n // Update state.datapackage with new resource path that includes filters (datastore query)\n dispatch(datapackageLoad({datapackage: updatedDatapackage}))\n // Set state of widgets as loading\n const loadingWidgets = JSON.parse(JSON.stringify(getState().widgets))\n    .map(widget => {\n      widget.loading = true\n      return widget\n    })\n  dispatch(fetchDataBegin({widgets: loadingWidgets}))\n  // Load dataset using new path and update state\n  datapackage = JSON.parse(JSON.stringify(getState().datapackage))\n  const loadedDataset = await loadDataset(datapackage)\n  dispatch(datapackageLoad({datapackage: loadedDataset}))\n  // Compile new data into widget views\n  const widgets = JSON.parse(JSON.stringify(getState().widgets))\n    .map(widget => {\n      widget.datapackage.views = widget.datapackage.views\n        .map(view => compileView(view, loadedDataset))\n      widget.loading = false\n      return widget\n    })\n  dispatch(fetchDataSuccess({widgets}))\n}\n\nexport const dataViewBuilderAction = (payload) => dispatch => {\n  let actionType\n  if (payload.specType === 'simple') {\n    actionType = 'DATA_VIEW_CHART_BUILDER_ACTION'\n  } else if (payload.specType === 'tabularmap') {\n    actionType = 'DATA_VIEW_MAP_BUILDER_ACTION'\n  }\n  dispatch({\n    type: actionType,\n    payload\n  })\n}\n\nexport const fetchDataAction = payload => async dispatch => {\n  const loadingWidgets = JSON.parse(JSON.stringify(payload.widgets))\n    .map(widget => {\n      widget.loading = true\n      return widget\n    })\n  dispatch(fetchDataBegin({widgets: loadingWidgets}))\n  const datapackage = JSON.parse(JSON.stringify(payload.datapackage))\n  const loadedDataset = await loadDataset(datapackage)\n  dispatch(datapackageLoad({datapackage: loadedDataset}))\n  const widgets = JSON.parse(JSON.stringify(payload.widgets))\n    .map(widget => {\n      widget.datapackage.views = widget.datapackage.views\n        .map(view => compileView(view, loadedDataset))\n      return widget\n    })\n  dispatch(fetchDataSuccess({widgets}))\n}\n\nconst selectTab = res => ({\n  type: 'SELECT_TAB',\n  payload: { ...res }\n})\n\nconst datapackageLoad = res => ({\n  type: 'DATAPACKAGE_LOAD',\n  payload: { ...res }\n})\n\nconst fetchDataBegin = res => ({\n  type: 'FETCH_DATA_BEGIN',\n  payload: { ...res }\n})\n\nconst fetchDataSuccess = res => ({\n  type: 'FETCH_DATA_SUCCESS',\n  payload: { ...res }\n})\n\nconst fetchDataFailure = err => ({\n  type: 'FETCH_DATA_FAILURE',\n  payload: { err }\n})\n","import React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport './App.css'\nimport { QueryBuilder } from 'datastore-query-builder'\nimport DataView from './components/DataView'\nimport Share from './components/Share'\nimport { ChartBuilder } from 'chart-builder'\nimport { MapBuilder } from 'map-builder'\nimport { Tabs, TabLink, TabContent } from 'react-tabs-redux'\nimport { filterUIAction, fetchDataAction, dataViewBuilderAction, selectTabAction } from './actions/'\nimport { getResourceForFiltering } from './utils'\n\nexport const App = props => {\n  useEffect(() => {\n    const payload = {\n      datapackage: props.datapackage,\n      widgets: props.widgets\n    }\n    props.fetchDataAction(payload)\n  }, [])\n\n  const activeWidget = props.widgets.find(widget => {\n    return widget.active\n  })\n\n  const selectedTab = activeWidget ? activeWidget.name : props.widgets[0].name\n  const tabLinks = props.widgets.map((widget) => {\n    return <TabLink to={widget.name} className='mr-4'>{widget.name}</TabLink>\n  })\n  const tabContents = props.widgets.map((widget) => {\n    return <TabContent for={widget.name}>\n      <div className=\"container flex py-6\">\n        <div className=\"w-3/4 py-3 mr-4\">\n          <DataView {...widget} />\n        </div>\n        <div className=\"w-1/4\">\n          <div className=\"w-full\">\n            <div className=\"p-4 mr-4\">\n              {\n                widget.datapackage.views[0].specType === 'simple'\n                ? <ChartBuilder view={widget.datapackage.views[0]} dataViewBuilderAction={props.dataViewBuilderAction} />\n                : ''\n              }\n              {\n                widget.datapackage.views[0].specType === 'tabularmap'\n                ? <MapBuilder view={widget.datapackage.views[0]} dataViewBuilderAction={props.dataViewBuilderAction} />\n                : ''\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </TabContent>\n  })\n\n  return (\n    <div className=\"ml-6\">\n      {/* Data Editor (aka filters / datastore query builder) */}\n      <div className=\"container py-4\">\n        <div className=\"datastore-query-builder\">\n          {\n            props.datapackage.resources[0].datastore_active\n            ? <QueryBuilder resource={getResourceForFiltering(props.datapackage)} filterBuilderAction={props.filterUIAction} />\n            : ''\n          }\n        </div>\n      </div>\n      {/* End of Data Editor */}\n\n      {/* Widgets (aka Views and Controls/Builders) */}\n      <Tabs \n        renderActiveTabContentOnly={true}\n        handleSelect={(selectedTab) => {\n          props.selectTabAction(selectedTab)\n        }}\n        selectedTab={selectedTab}>\n          {tabLinks}\n          {tabContents}\n      </Tabs>\n      <Share serializedState={props.serializedState} />\n      {/* End of Widgets */}\n     </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n ...state\n})\n\nconst mapDispatchToProps = dispatch => ({\n filterUIAction: (payload) => dispatch(filterUIAction(payload)),\n fetchDataAction: payload => dispatch(fetchDataAction(payload)),\n dataViewBuilderAction: payload => dispatch(dataViewBuilderAction(payload)),\n selectTabAction: payload => dispatch(selectTabAction(payload))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\nimport './App.css'\nimport App from './App'\n\nexport default props => {\n  let datapackage\n  \n  // Allow datapackage json or obj\n  if (typeof props.datapackage === 'string') {\n    try {\n      datapackage = JSON.parse(props.datapackage)\n    } catch (e) {\n      // TODO -- would be nice for the app to still load in an empty state on fail case\n      datapackage = {}\n      console.warn('Invalid datapackage', e)\n    }\n  } else if (typeof props.datapackage === 'object') {\n    datapackage = props.datapackage\n  }\n  \n  let views\n  \n  try {\n    views = JSON.parse(JSON.stringify(datapackage.views))\n    delete datapackage.views\n  } catch {\n    console.log('No views set on datapackage')\n  }\n\n  const widgetsFromViews = (views) => {\n    const widgetNames = {\n      'table': 'Table',\n      'tabularmap': 'Map',\n      'map': 'Map',\n      'simple': 'Chart'\n    }\n\n    return views.map((view, index) => {\n      return {\n        active: index === 0 ? true : false,\n        name: widgetNames[view.specType],\n        datapackage: {views: [view]}\n      }\n    })\n  }\n\n  const widgets = (props.widgets) ? props.widgets : widgetsFromViews(views)\n\n  return (\n    <Provider store={configureStore({widgets, datapackage})}>\n      <App />\n    </Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css'\nimport App from './AppWithProvider'\nimport * as serviceWorker from './serviceWorker';\n\nconst instances = document.getElementsByClassName('data-explorer')\n\nfor (const instance of instances) {\n  try {\n    const props = JSON.parse(instance.getAttribute('data-datapackage'))\n    const { datapackage, ...rest} = props\n\n    ReactDOM.render(\n      <App datapackage={datapackage} {...rest} />, document.getElementById(instance.id)\n    )\n  } catch (e) {\n    console.warn('Failed to render data-explorer', e)\n  }\n}\n\nserviceWorker.unregister();\n","var map = {\n\t\"./geojson.json\": 469,\n\t\"./table-schema.json\": 911,\n\t\"./topojson.json\": 470\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 910;"],"sourceRoot":""}